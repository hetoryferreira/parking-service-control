DROP TABLE IF EXISTS parking_session;
DROP TABLE IF EXISTS spot;
DROP TABLE IF EXISTS garage_sector;
DROP TABLE IF EXISTS garage;

-- ============================================================
-- GARAGE
-- ============================================================
CREATE TABLE garage (
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code            VARCHAR(32)  NOT NULL,
    name            VARCHAR(255),
    base_price      DECIMAL(15,2) NOT NULL,
    max_capacity    INT          NOT NULL,
    occupied        INT          NOT NULL,
    created_at      TIMESTAMP,          -- gerido pela app/trigger se quiser
    updated_at      TIMESTAMP,          -- gerido pela app/trigger se quiser

    CONSTRAINT uk_garage_code UNIQUE (code)
);

-- Índices extras (consultas por code são comuns)
CREATE INDEX idx_garage_code ON garage(code);

-- ============================================================
-- GARAGE_SECTOR
-- ============================================================
CREATE TABLE garage_sector (
    id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    garage_id     BIGINT       NOT NULL,
    code          VARCHAR(32)  NOT NULL,
    name          VARCHAR(120) NOT NULL,
    max_capacity  INT          NOT NULL,
    occupied      INT          NOT NULL,
    is_closed     BOOLEAN      NOT NULL,
    created_at    TIMESTAMP,
    updated_at    TIMESTAMP,

    CONSTRAINT fk_sector_garage
        FOREIGN KEY (garage_id) REFERENCES garage(id),

    CONSTRAINT uk_sector_garage_code
        UNIQUE (garage_id, code)
);

-- Índices úteis
CREATE INDEX idx_sector_garage ON garage_sector(garage_id);
CREATE INDEX idx_sector_code   ON garage_sector(code);
CREATE INDEX idx_sector_closed ON garage_sector(is_closed);

-- ============================================================
-- SPOT (vaga)
-- ============================================================
CREATE TABLE spot (
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    garage_id  BIGINT   NOT NULL,
    sector_id  BIGINT   NOT NULL,
    lat        DOUBLE,
    lng        DOUBLE,
    occupied   BOOLEAN  NOT NULL,

    CONSTRAINT fk_spot_garage
        FOREIGN KEY (garage_id) REFERENCES garage(id),

    CONSTRAINT fk_spot_sector
        FOREIGN KEY (sector_id) REFERENCES garage_sector(id)
);

-- Índices úteis (alocação rápida por setor/ocupação)
CREATE INDEX idx_spot_sector            ON spot(sector_id);
CREATE INDEX idx_spot_sector_occupied   ON spot(sector_id, occupied);
CREATE INDEX idx_spot_garage            ON spot(garage_id);

-- ============================================================
-- PARKING_SESSION
-- ============================================================
-- TABELA PARKING_SESSION (trecho relevante)
create table if not exists parking_session (
  id bigserial primary key,
  plate varchar(12) not null,
  garage_id bigint not null,
  sector_id bigint,                          -- ⬅️ nova coluna (pode ser null no ENTRY)
  status varchar(10) not null,
  entry_time timestamp,
  parked_time timestamp,
  exit_time timestamp,
  effective_hourly_price numeric(15,2),
  total_amount numeric(15,2)
);


-- Índices úteis para operações do domínio
CREATE INDEX idx_session_plate                         ON parking_session(plate);
CREATE INDEX idx_session_plate_status                  ON parking_session(plate, status);
CREATE INDEX idx_session_exit_time                     ON parking_session(exit_time);
CREATE INDEX idx_session_status                        ON parking_session(status);

-- FKs/Índices
alter table parking_session
  add constraint if not exists fk_ps_garage
  foreign key (garage_id) references garage(id);

alter table parking_session
  add constraint if not exists fk_ps_sector
  foreign key (sector_id) references garage_sector(id);

create index if not exists idx_ps_garage on parking_session(garage_id);
create index if not exists idx_ps_sector on parking_session(sector_id);
create index if not exists idx_ps_exit_time on parking_session(exit_time);
create index if not exists idx_ps_status on parking_session(status);
